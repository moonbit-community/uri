// Generated using `moon info`, DON'T EDIT IT
package "bobzhang/uri"

// Values
fn empty() -> Uri

fn parse(String) -> Uri raise UriError

fn resolve(Uri, Uri) -> Uri raise UriError

// Errors
pub suberror UriError {
  InvalidScheme(String)
  InvalidAuthority(String)
  InvalidPath(String)
  InvalidQuery(String)
  InvalidFragment(String)
  InvalidPort(String)
  EmptyUri
}
impl ToJson for UriError

// Types and methods
pub struct Authority {
  userinfo : String?
  host : String
  port : Int?
}
impl ToJson for Authority

pub struct Uri {
  scheme : String?
  authority : Authority?
  path : String
  query : String?
  fragment : String?
}
// Core accessors
fn Uri::scheme(Self) -> String?
fn Uri::host(Self) -> String?
fn Uri::port(Self) -> Int?
fn Uri::path(Self) -> String
fn Uri::query(Self) -> String?
fn Uri::fragment(Self) -> String?
// Builders (immutable)
fn Uri::with_scheme(Self, String?) -> Self
fn Uri::with_host(Self, String?) -> Self
fn Uri::with_port(Self, Int?) -> Self
fn Uri::with_path(Self, String) -> Self
fn Uri::with_query(Self, String?) -> Self
fn Uri::with_fragment(Self, String?) -> Self
// Utility methods
fn Uri::is_absolute(Self) -> Bool
fn Uri::is_relative(Self) -> Bool
fn Uri::normalize(Self) -> Self
fn Uri::effective_port(Self) -> Int?
fn Uri::to_string(Self) -> String
// Query parameter helpers
fn Uri::get_query_param(Self, String) -> String?
fn Uri::with_query_param(Self, String, String) -> Self
fn Uri::remove_query_param(Self, String) -> Self
// Encoding/decoding utilities
fn Uri::encode(String) -> String
fn Uri::decode(String) -> String
// Query string manipulation
fn Uri::parse_query(String) -> Array[(String, String)]
fn Uri::build_query(Array[(String, String)]) -> String
// Path segment manipulation
fn Uri::path_segments(Self) -> Array[String]
fn Uri::with_path_segments(Self, Array[String]) -> Self
// Userinfo handling
fn Uri::userinfo_components(Self) -> (String, String?)?
fn Uri::with_userinfo(Self, String?, String?) -> Self
impl Show for Uri
impl ToJson for Uri

// Type aliases

// Traits

