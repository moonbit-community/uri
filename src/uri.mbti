// Generated using `moon info`, DON'T EDIT IT
package "bobzhang/uri"

// Values
fn build_query(Array[(String, String)]) -> String

fn debug_string(Uri) -> String

fn decode(String) -> String

fn default_port(String) -> Int?

fn effective_port(Uri) -> Int?

fn empty() -> Uri

fn encode(String) -> String

fn example_parse() -> Unit

fn fragment(Uri) -> String?

fn get_query_param(Uri, String) -> String?

fn host(Uri) -> String?

fn is_absolute(Uri) -> Bool

fn is_relative(Uri) -> Bool

fn normalize(Uri) -> Uri

fn of_string(String) -> Uri raise UriError

fn parse_query(String) -> Array[(String, String)]

fn path(Uri) -> String

fn port(Uri) -> Int?

fn pretty_string(Uri) -> String

fn query(Uri) -> String?

fn remove_query_param(Uri, String) -> Uri

fn resolve(Uri, Uri) -> Uri raise UriError

fn scheme(Uri) -> String?

fn to_string(Uri) -> String

fn with_fragment(Uri, String?) -> Uri

fn with_host(Uri, String?) -> Uri

fn with_path(Uri, String) -> Uri

fn with_port(Uri, Int?) -> Uri

fn with_query(Uri, String?) -> Uri

fn with_query_param(Uri, String, String) -> Uri

fn with_scheme(Uri, String?) -> Uri

// Errors
pub suberror UriError {
  InvalidScheme(String)
  InvalidAuthority(String)
  InvalidPath(String)
  InvalidQuery(String)
  InvalidFragment(String)
  InvalidPort(String)
  EmptyUri
}
impl ToJson for UriError

// Types and methods
pub struct Authority {
  userinfo : String?
  host : String
  port : Int?
}
impl ToJson for Authority

pub struct Uri {
  scheme : String?
  authority : Authority?
  path : String
  query : String?
  fragment : String?
}
impl Show for Uri
impl ToJson for Uri

// Type aliases

// Traits

